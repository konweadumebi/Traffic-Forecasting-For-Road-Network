// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: city.sql

package db

import (
	"context"
)

const getCity = `-- name: GetCity :one
SELECT name,
       ST_ASTEXT(geom)                     as geom,
       ST_ASTEXT(ST_TRANSFORM(geom, 4326)) as geom_geographic
from city
where name = $1
`

type GetCityRow struct {
	Name           string      `json:"name"`
	Geom           interface{} `json:"geom"`
	GeomGeographic interface{} `json:"geom_geographic"`
}

func (q *Queries) GetCity(ctx context.Context, name string) (GetCityRow, error) {
	row := q.db.QueryRow(ctx, getCity, name)
	var i GetCityRow
	err := row.Scan(&i.Name, &i.Geom, &i.GeomGeographic)
	return i, err
}

const getCityGeom = `-- name: GetCityGeom :one
SELECT ST_ASTEXT(geom)                     as geom,
       ST_ASTEXT(ST_TRANSFORM(geom, 4326)) as geom_geographic
from city
where name = $1
`

type GetCityGeomRow struct {
	Geom           interface{} `json:"geom"`
	GeomGeographic interface{} `json:"geom_geographic"`
}

func (q *Queries) GetCityGeom(ctx context.Context, name string) (GetCityGeomRow, error) {
	row := q.db.QueryRow(ctx, getCityGeom, name)
	var i GetCityGeomRow
	err := row.Scan(&i.Geom, &i.GeomGeographic)
	return i, err
}

const getClosestPointToQueryLocationByLatLngGeom = `-- name: GetClosestPointToQueryLocationByLatLngGeom :one
SELECT id,
       name,
       ST_ASTEXT(geom) AS closest_geom
FROM node
ORDER BY geom <-> st_transform(ST_GEOMFROMTEXT($1, 4326), 3857) LIMIT 1
`

type GetClosestPointToQueryLocationByLatLngGeomRow struct {
	ID          int64       `json:"id"`
	Name        string      `json:"name"`
	ClosestGeom interface{} `json:"closest_geom"`
}

func (q *Queries) GetClosestPointToQueryLocationByLatLngGeom(ctx context.Context, stGeomfromtext interface{}) (GetClosestPointToQueryLocationByLatLngGeomRow, error) {
	row := q.db.QueryRow(ctx, getClosestPointToQueryLocationByLatLngGeom, stGeomfromtext)
	var i GetClosestPointToQueryLocationByLatLngGeomRow
	err := row.Scan(&i.ID, &i.Name, &i.ClosestGeom)
	return i, err
}

const listCities = `-- name: ListCities :many
SELECT name
     , ST_ASTEXT(geom)                     as geom
     , ST_ASTEXT(ST_TRANSFORM(geom, 4326)) as geom_geographic
from city
order by id
`

type ListCitiesRow struct {
	Name           string      `json:"name"`
	Geom           interface{} `json:"geom"`
	GeomGeographic interface{} `json:"geom_geographic"`
}

func (q *Queries) ListCities(ctx context.Context) ([]ListCitiesRow, error) {
	rows, err := q.db.Query(ctx, listCities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListCitiesRow{}
	for rows.Next() {
		var i ListCitiesRow
		if err := rows.Scan(&i.Name, &i.Geom, &i.GeomGeographic); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchCity = `-- name: SearchCity :many
SELECT id, name, ST_ASTEXT(ST_TRANSFORM(geom, 4326)) as geom
FROM city
WHERE name ILIKE '%' || $1::text || '%'
`

type SearchCityRow struct {
	ID   int64       `json:"id"`
	Name string      `json:"name"`
	Geom interface{} `json:"geom"`
}

func (q *Queries) SearchCity(ctx context.Context, text string) ([]SearchCityRow, error) {
	rows, err := q.db.Query(ctx, searchCity, text)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchCityRow{}
	for rows.Next() {
		var i SearchCityRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Geom); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
